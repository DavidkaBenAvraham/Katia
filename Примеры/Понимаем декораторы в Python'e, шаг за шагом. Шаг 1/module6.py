## https://habr.com/ru/post/141411/
'''
Разрушаем ореол таинственности вокруг декораторов

Вот так можно было записать предыдущий пример, используя синтаксис декораторов:

'''

@my_shiny_new_decorator
def another_stand_alone_function():
   self.log("Оставь меня в покое"
 
another_stand_alone_function()
#выведет:
# Я - код, который отработает до вызова функции
# Оставь меня в покое
# А я - код, срабатывающий после

'''
Да, всё действительно так просто! decorator — просто синтаксический сахар для 
конструкций вида:
'''

another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)

'''
Декораторы — это просто pythonic-реализация паттерна проектирования «Декоратор». 
В Python включены некоторые классические паттерны проектирования, такие как 
рассматриваемые в этой статье декораторы, или привычные любому пайтонисту итераторы.
'''

#Конечно, можно вкладывать декораторы друг в друга, например так:
def bread(func):
    def wrapper():
        self.log("</------\>")
        func()
        self.log("<\______/>")
    return wrapper
 
def ingredients(func):
    def wrapper():
        self.log("#помидоры#")
        func()
        self.log("~салат~"
    return wrapper
 
def sandwich(food="--ветчина--"):
    self.log(food)
 
sandwich()
#выведет: --ветчина--
sandwich = bread(ingredients(sandwich))
sandwich()
#выведет:
# </------\>
# #помидоры#
# --ветчина--
# ~салат~
# <\______/>


И используя синтаксис декораторов:
@bread
@ingredients
def sandwich(food="--ветчина--"):
   self.log(food
 
sandwich()
#выведет:
# </------\>
# #помидоры#
# --ветчина--
# ~салат~
# <\______/>


Следует помнить о том, что порядок декорирования ВАЖЕН:
@ingredients
@bread
def sandwich(food="--ветчина--"):
   self.log(food
 
sandwich()
#выведет:
# #помидоры#
# </------\>
# --ветчина--
# <\______/>
# ~салат~


На этом моменте Вы можете счастливо уйти, с осознанием того, что вы поняли, что такое декораторы и с чем их едят.
Для тех же, кто хочет помучать ещё немного свой мозг, завтра будет допереведена вторая часть статьи, посвящённая продвинутому использованию декораторов.
